from fastapi import FastAPI
import time
from fastapi import Request
from starlette.middleware.base import BaseHTTPMiddleware
from fastapi.middleware.cors import CORSMiddleware
# A "middleware" is a function that works with every request before it is processed by any specific path operation. And also with every response before returning it.

# It takes each request that comes to your application.
# It can then do something to that request or run any needed code.
# Then it passes the request to be processed by the rest of the application (by some path operation).
# It then takes the response generated by the application (by some path operation).
# It can do something to that response or run any needed code.
# Then it returns the response.
# If there were any background tasks (documented later), they will run after all the middleware.

app = FastAPI()

class MyMiddleware(BaseHTTPMiddleware):
    async def dispatch(self,request:Request,call_next):
        start_time = time.time()
        response = await call_next(request)
        process_time = time.time() - start_time
        response.headers["X-Process-Time"] = str(process_time)
        return response

# CORS - cross origin resource sharing
origins = ["http://localhost:8000","http://localhost:3000"]

# adding functionality to each route
app.add_middleware(MyMiddleware,allow_origin=origins)
    
@app.get("/blah")
async def blah():
    return {"hello":"world"}



# Origin
# An origin is the combination of protocol (http, https), domain (myapp.com, localhost, localhost.tiangolo.com), and port (80, 443, 8080).
# CORS or "Cross-Origin Resource Sharing" refers to the situations when a frontend running in a browser has JavaScript code that communicates with a backend, and the backend is in a different "origin" than the frontend.

# So, let's say you have a frontend running in your browser at http://localhost:8080, and its JavaScript is trying to communicate with a backend running at http://localhost (because we don't specify a port, the browser will assume the default port 80).

# Then, the browser will send an HTTP OPTIONS request to the backend, and if the backend sends the appropriate headers authorizing the communication from this different origin (http://localhost:8080) then the browser will let the JavaScript in the frontend send its request to the backend.

# To achieve this, the backend must have a list of "allowed origins".

origins = [
    "http://localhost.tiangolo.com",
    "https://localhost.tiangolo.com",
    "http://localhost",
    "http://localhost:8080",
]

app.add_middleware(
    CORSMiddleware,
    allow_origins=origins,
    allow_credentials=True,
    allow_methods=["*"], # wildcard (*) which means allow all
    allow_headers=["*"],
)


# The following arguments are supported:

# allow_origins - A list of origins that should be permitted to make cross-origin requests. E.g. ['https://example.org', 'https://www.example.org']. You can use ['*'] to allow any origin.
# allow_origin_regex - A regex string to match against origins that should be permitted to make cross-origin requests. e.g. 'https://.*\.example\.org'.
# allow_methods - A list of HTTP methods that should be allowed for cross-origin requests. Defaults to ['GET']. You can use ['*'] to allow all standard methods.
# allow_headers - A list of HTTP request headers that should be supported for cross-origin requests. Defaults to []. You can use ['*'] to allow all headers. The Accept, Accept-Language, Content-Language and Content-Type headers are always allowed for simple CORS requests.
# allow_credentials - Indicate that cookies should be supported for cross-origin requests. Defaults to False. Also, allow_origins cannot be set to ['*'] for credentials to be allowed, origins must be specified.
# expose_headers - Indicate any response headers that should be made accessible to the browser. Defaults to [].
# max_age - Sets a maximum time in seconds for browsers to cache CORS responses. Defaults to 600.